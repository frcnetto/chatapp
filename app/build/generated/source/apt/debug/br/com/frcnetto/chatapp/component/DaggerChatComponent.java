// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package br.com.frcnetto.chatapp.component;

import br.com.frcnetto.chatapp.activity.MainActivity;
import br.com.frcnetto.chatapp.activity.MainActivity_MembersInjector;
import br.com.frcnetto.chatapp.module.ChatModule;
import br.com.frcnetto.chatapp.module.ChatModule_GetServiceFactory;
import br.com.frcnetto.chatapp.service.ChatService;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerChatComponent implements ChatComponent {
  private Provider<ChatService> getServiceProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerChatComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ChatComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getServiceProvider = ChatModule_GetServiceFactory.create(builder.chatModule);

    this.mainActivityMembersInjector = MainActivity_MembersInjector.create(getServiceProvider);
  }

  @Override
  public void infect(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private ChatModule chatModule;

    private Builder() {}

    public ChatComponent build() {
      if (chatModule == null) {
        this.chatModule = new ChatModule();
      }
      return new DaggerChatComponent(this);
    }

    public Builder chatModule(ChatModule chatModule) {
      this.chatModule = Preconditions.checkNotNull(chatModule);
      return this;
    }
  }
}
